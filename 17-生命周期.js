// 组件生命周期

// 生命周期 Life circle
// 组件从 创建->运行->销毁 的整个过程
// 强调一个时间段

// 生命周期函数
// 内置函数 伴随生命周期，按顺序执行

// 组件创建阶段
// 1.new Vue() 构造函数
// 随后：初始化事件、生命周期函数
// 2.beforeCreate 内存中构建之前
//   组件的props data methods尚未被创建，均处于不可用状态
// 随后：初始化props data methods
// 3.created 内存中构建完成
//   组件的props data methods已经创建好且可用
// * but 组建的模板结构尚未生成，不能操作DOM结构
// * 这个阶段比较常用，此时可以发起ajax请求用于渲染模板结构
// 随后：判断有没有'el'的属性：
//      如果没有等待$mount(el)被调用
//      如果有查看是否有template属性：
//          如果有 基于数据和模板在内存中编译对应的HTML结构
//          如果没有 编译el区域的DOM结构
// 4.beforeMount 渲染之前
//   将要把内存中的HTML结构渲染到浏览器之前
//   此时浏览器中没有当前组件的DOM结构
// 随后：用内存中的HTML结构替换掉el属性指定的DOM元素
// 5.mounted 渲染完毕
//   已经渲染到HTML之中
//   此时浏览器中已经包含了组件的DOM结构

// 运行阶段
// 当数据发生变化时：
// 1.beforeUpdated
//   将要根据变化后、最新的数据重新渲染到组件的模板结构
// 然后：根据最新的数据重新渲染组件DOM结构
// 2.updated
//   已经根据最新的数据渲染完毕DOM结构

// 销毁阶段
// 极少使用
// 1.beforeDestroy
//   将要销毁 组件仍处于正常工作状态
// 随后：雄安会当前组件的数据侦听器 子组件 事件监听...
// 2.destroyed
//   组件已经被销毁，对应DOM结构完全被移除